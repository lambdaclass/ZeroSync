from starkware.cairo.common.alloc import alloc
from starkware.cairo.common.pow import pow

from stark_verifier.air.air_instance import AirInstance, DeepCompositionCoefficients
from stark_verifier.air.transitions.frame import EvaluationFrame
from stark_verifier.channel import Table
from stark_verifier.utils import Vec

struct DeepComposer {
    cc: DeepCompositionCoefficients,
    x_coordinates: felt*,
    z_curr: felt,
    z_next: felt,
}

func deep_composer_new{
    range_check_ptr
}(
    air: AirInstance,
    query_positions: felt*,
    z: felt,
    cc: DeepCompositionCoefficients,
) -> DeepComposer {
    alloc_locals;
    
    let g = air.trace_domain_generator;
    let g_lde = air.lde_domain_generator;
    let domain_offset = 3;

    // TODO: Don't hardcode the number of query positions here
    let (x_coordinates: felt*) = alloc();
    <% for (var i=0; i<54; i++) { %>
    let (x) = pow(g_lde, query_positions[<%= i %>]);
    let x = x * domain_offset;
    assert x_coordinates[<%= i %>] = x;
    <% } %>

    let z_curr = z;
    let z_next = z * g;

    let res = DeepComposer(
        cc,
        x_coordinates,
        z_curr,
        z_next,
    );
    return res;
}

func compose_trace_columns{
    range_check_ptr
}(
    composer: DeepComposer,
    queried_main_trace_states: Table,
    queried_aux_trace_states: Table,
    ood_main_frame: EvaluationFrame,
    ood_aux_frame: EvaluationFrame,
) -> felt* {
    let (result: felt*) = alloc();
    tempvar result_ptr = result;

    // Main trace coefficient rows
    let n_cols = queried_main_trace_states.n_cols;
    let cc_trace_curr = composer.cc.trace.values;
    let cc_trace_next = composer.cc.trace.values + n_cols;

    let z_curr = composer.z_curr;
    let z_next = composer.z_next;

    // Compose columns of the main segment
    // TODO: Don't hardcode the number of query and columns
    tempvar n = 54;
    let row = queried_main_trace_states.elements;
    tempvar row_ptr = row;
    tempvar x_coord_ptr = composer.x_coordinates;
    loop_main:
        tempvar sum_curr = 0;
        tempvar sum_next = 0;
        <% for (var i=0; i<33; i++) { %>
        tempvar sum_curr = sum_curr + ([row_ptr + <%= i %>] - ood_main_frame.current[<%= i %>]) * cc_trace_curr[<%= i %>];
        tempvar sum_next = sum_next + ([row_ptr + <%= i %>] - ood_main_frame.next[<%= i %>]) * cc_trace_next[<%= i %>];
        <% } %>
        tempvar x = [x_coord_ptr];
        tempvar sum = sum_curr / (x - z_curr) + sum_next / (x - z_next);
        assert [result_ptr] = sum;

        tempvar n = n - 1;
        tempvar row_ptr = row_ptr + n_cols;
        tempvar x_coord_ptr = x_coord_ptr + 1;
        tempvar result_ptr = result_ptr + 1;
    jmp loop_main if n != 0;
    
    // Aux trace coefficient rows
    let n_cols = queried_aux_trace_states.n_cols;
    let cc_trace_curr = cc_trace_next;
    let cc_trace_next = cc_trace_next + n_cols;

    // Compose columns of the aux segments
    let row = queried_aux_trace_states.elements;
    tempvar row_ptr = row;
    tempvar x_coord_ptr = composer.x_coordinates;
    loop_aux:
        tempvar sum_curr = 0;
        tempvar sum_next = 0;
        <% for (var i=33; i<51; i++) { %>
        tempvar sum_curr = sum_curr + ([row_ptr + <%= i %>] - ood_aux_frame.current[<%= i %>]) * cc_trace_curr[<%= i %>];
        tempvar sum_next = sum_next + ([row_ptr + <%= i %>] - ood_aux_frame.next[<%= i %>]) * cc_trace_next[<%= i %>];
        <% } %>
        tempvar x = [x_coord_ptr];
        tempvar sum = sum_curr / (x - z_curr) + sum_next / (x - z_next);
        assert [result_ptr] = sum;

        tempvar n = n - 1;
        tempvar row_ptr = row_ptr + n_cols;
        tempvar x_coord_ptr = x_coord_ptr + 1;
        tempvar result_ptr = result_ptr + 1;
    jmp loop_aux if n != 0;

    return result;
}

func compose_constraint_evaluations{
    range_check_ptr
}(
    composer: DeepComposer,
    queried_evaluations: Table,
    ood_evaluations: Vec,
) -> felt* {
    // Compute z^m
    let num_eval_columns = ood_evaluations.n_elements;
    let z = composer.z_curr;
    let (z_m) = pow(z, num_eval_columns);
     
    let (result: felt*) = alloc();
    tempvar result_ptr = result;

    let n_cols = queried_evaluations.n_cols;
    let cc_constraint = composer.cc.constraints;
    let cc_trace_next = composer.cc.trace.values + n_cols;

    // TODO: Don't hardcode number of queries
    tempvar n = 54;
    let row = queried_evaluations.elements;
    tempvar row_ptr = row;
    tempvar x_coord_ptr = composer.x_coordinates;
    loop:
        tempvar sum = 0;
        <% for (var i=0; i<49; i++) { %>
        tempvar sum = sum + (row[<%= i %>] - ood_evaluations.elements[<%= i %>]) * cc_constraint[<%= i %>];
        <% } %>
        tempvar x = [x_coord_ptr];
        tempvar sum = sum / (x - z_m);
        assert [result_ptr] = sum;

        tempvar n = n - 1;
        tempvar row_ptr = row_ptr + n_cols;
        tempvar x_coord_ptr = x_coord_ptr + 1;
        tempvar result_ptr = result_ptr + 1;
    jmp loop if n != 0;

    return result;
}

func combine_compositions(
    composer: DeepComposer,
    t_composition: felt*,
    c_composition: felt*
) -> felt* {

    let (result: felt*) = alloc();
    tempvar result_ptr = result;

    tempvar cc_degree_0 = composer.cc.degree[0];
    tempvar cc_degree_1 = composer.cc.degree[1];
    
    // TODO: Don't hardcode number of queries
    tempvar n = 54;
    tempvar t_ptr = t_composition;
    tempvar c_ptr = c_composition;
    tempvar x_coord_ptr = composer.x_coordinates;
    loop:
        tempvar x = [x_coord_ptr];
        tempvar t = [t_ptr];
        tempvar c = [c_ptr];
        tempvar composition = t + c;
        tempvar composition = composition * (cc_degree_0 + x * cc_degree_1);
        assert [result_ptr] = composition;

        tempvar n = n - 1;
        tempvar t_ptr = t_ptr + 1;
        tempvar c_ptr = c_ptr + 1;
        tempvar x_coord_ptr = x_coord_ptr + 1;
        tempvar result_ptr = result_ptr + 1;
    jmp loop if n != 0;

    return result;
}
